//==============================================================================
/*
    Software License Agreement (BSD License)
    Copyright (c) 2003-2016, CHAI3D.
    (www.chai3d.org)

    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

    * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
    copyright notice, this list of conditions and the following
    disclaimer in the documentation and/or other materials provided
    with the distribution.

    * Neither the name of CHAI3D nor the names of its contributors may
    be used to endorse or promote products derived from this software
    without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.

    \author    <http://www.chai3d.org>
    \author    Francois Conti
    \version   3.2.0 $Rev: 1925 $
*/
//==============================================================================

//------------------------------------------------------------------------------
#include "chai3d.h"
//------------------------------------------------------------------------------
#include <GLFW/glfw3.h>
//------------------------------------------------------------------------------
using namespace chai3d;
using namespace std;
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// GENERAL SETTINGS
//------------------------------------------------------------------------------

// stereo Mode
/*
    C_STEREO_DISABLED:            Stereo is disabled
    C_STEREO_ACTIVE:              Active stereo for OpenGL NVDIA QUADRO cards
    C_STEREO_PASSIVE_LEFT_RIGHT:  Passive stereo where L/R images are rendered next to each other
    C_STEREO_PASSIVE_TOP_BOTTOM:  Passive stereo where L/R images are rendered above each other
*/
cStereoMode stereoMode = C_STEREO_DISABLED;

// fullscreen mode
bool fullscreen = false;

// mirrored display
bool mirroredDisplay = false;

//------------------------------------------------------------------------------
// STATES
//------------------------------------------------------------------------------
enum MouseState
{
    MOUSE_IDLE,
    MOUSE_SELECTION
};

//------------------------------------------------------------------------------
// DECLARED VARIABLES
//------------------------------------------------------------------------------

// a world that contains all objects of the virtual environment
cWorld* world;

// a camera to render the world in the window display
cCamera* camera;

// a light source to illuminate the objects in the world
cDirectionalLight* light;

// virtual stl models mesh
cMultiMesh* bolapalo1;
cMultiMesh* bolapalo2;
cMultiMesh* bolapalo3;
cMultiMesh* palo;
cMultiMesh* cuadradopalo;
cMultiMesh* patatas;

// a virtual caja mesh
cMultiMesh* caja_in;
cMultiMesh* caja_out;

// a virtual needle mesh
cMesh* needle;

//virtual internal esfera mesh
cMesh* esfera1;
cMesh* esfera2;
cMesh* esfera3;
// a virtual internal cubo mesh
cMesh* cubo;
//virtual internal cilindro mesh
cMesh* cilindro;
cMesh* cilindro1;
cMesh* cilindro2;
cMesh* cilindro3;
cMesh* cilindroC;

// transparency level
double transparencyLevel = 0.6;
// transparency level
double transparencyLevelInternalObjects = 1;

// a haptic device handler
cHapticDeviceHandler* handler;

// a pointer to the current haptic device
cGenericHapticDevicePtr hapticDevice;

// a virtual tool representing the haptic device in the scene
cToolCursor* tool;

//posicion haptica
cVector3d haptic_pos;

// side framebuffer
cFrameBufferPtr frameBuffer;
cFrameBufferPtr frameBuffer2;

// a colored background
cBackground* background;
// a colored background NUEVO FONDO
cBackground* background1;

// a small sphere which displays the position of a click hit in the world sirve para ver q has clicado
cShapeSphere* sphereSelect;

// a small line to display the surface normal at the selection point
cShapeLine* normalSelect;

// a pointer to the selected object
cGenericObject* selectedObject = NULL;

// offset between the position of the mouse click on the object and the object reference frame location.
cVector3d selectedObjectOffset;

// side Panel that displays content of framebuffer
cViewPanel* viewPanel;
cViewPanel* viewPanel2; //ORII

// a font for rendering text
cFontPtr font;

// a label to display the rate [Hz] at which the simulation is running
cLabel* labelRates;

// some widgets: panels
cPanel* panel;
cPanel* lightpanel;
cPanel* pospanel;

// some labels
cLabel* labelRed;
cLabel* labelGreen;
cLabel* labelBlue;
cLabel* labelOrange;
cLabel* labelYellow;
cLabel* labelONOFF;
cLabel* frontview;
cLabel* sideview;
cLabel* topview;

// a label to explain what is happening
cLabel* labelMessage;
cLabel* labelMessage2;

// a flag that indicates if the haptic simulation is currently running
bool simulationRunning = false;

// a flag that indicates if the haptic simulation has terminated
bool simulationFinished = true;

// a frequency counter to measure the simulation graphic rate
cFrequencyCounter freqCounterGraphics;

// a frequency counter to measure the simulation haptic rate
cFrequencyCounter freqCounterHaptics;

// haptic thread
cThread* hapticsThread;

// a handle to window display context
GLFWwindow* window = NULL;

// current width of window
int width = 0;

// current height of window
int height = 0;

// swap interval for the display context (vertical synchronization)
int swapInterval = 1;

// root resource path
string resourceRoot;

// position of mouse click.
cVector3d selectedPoint;

// mouse position
double mouseX, mouseY;

// mouse state
MouseState mouseState = MOUSE_IDLE;

// Audio device to play sound NUEVO encender
cAudioDevice* audioDevice;

// Audio buffers to store sound files NUEVO encender
cAudioBuffer* audioBuffer1;

// audioSource1 NUEVO encender
cAudioSource* audioSource1;

// Audio device to play sound NUEVO onof
cAudioDevice* audioDevice1;

// Audio buffers to store sound files NUEVO onof
cAudioBuffer* audioBuffer2;

// audioSource1 NUEVO onof
cAudioSource* audioSource2;

//luz aguja
cSpotLight* needle_light;

//------------------------------------------------------------------------------
// DECLARED MACROS
//------------------------------------------------------------------------------

// convert to resource path
#define RESOURCE_PATH(p)    (char*)((resourceRoot+string(p)).c_str())


//------------------------------------------------------------------------------
// DECLARED FUNCTIONS
//------------------------------------------------------------------------------

// callback when the window display is resized
void windowSizeCallback(GLFWwindow* a_window, int a_width, int a_height);

// callback when an error GLFW occurs
void errorCallback(int error, const char* a_description);

// callback when a key is pressed
void keyCallback(GLFWwindow* a_window, int a_key, int a_scancode, int a_action, int a_mods);

// this function renders the scene
void updateGraphics(void);

// this function contains the main haptics simulation loop
void updateHaptics(void);

// this function closes the application
void close(void);

// callback to handle mouse click
void mouseButtonCallback(GLFWwindow* a_window, int a_button, int a_action, int a_mods);

// callback to handle mouse motion
void mouseMotionCallback(GLFWwindow* a_window, double a_posX, double a_posY);


int main(int argc, char* argv[])
{
    //--------------------------------------------------------------------------
    // INITIALIZATION
    //--------------------------------------------------------------------------

    cout << endl;
    cout << "-----------------------------------" << endl;
    cout << "CHAI3D" << endl;
    cout << "Demo: 23-tooth" << endl;
    cout << "Copyright 2003-2016" << endl;
    cout << "-----------------------------------" << endl << endl << endl;
    cout << "Keyboard Options:" << endl << endl;
    cout << "[1, 2, 3, 4, 5, 6, 7, 8, 9] - Change needle position" << endl;
    cout << "[f] - Enable/Disable full screen mode" << endl;
    cout << "[m] - Enable/Disable vertical mirroring" << endl;
    cout << "[q] - Exit application" << endl;
    cout << "[up, down, right, left] - Move needle up, down, rith or left" << endl;
    cout << "[M] - vertical mirroring " << endl;
    cout << "[O] - increase transparency " << endl;
    cout << "[K] - decrease transparency " << endl;

    cout << endl << endl;

    // parse first arg to try and locate resources
    string resourceRoot = string(argv[0]).substr(0, string(argv[0]).find_last_of("/\\") + 1);


    //--------------------------------------------------------------------------
    // OPEN GL - WINDOW DISPLAY
    //--------------------------------------------------------------------------

    // initialize GLFW library
    if (!glfwInit())
    {
        cout << "failed initialization" << endl;
        cSleepMs(1000);
        return 1;
    }

    // set error callback
    glfwSetErrorCallback(errorCallback);

    // compute desired size of window
    const GLFWvidmode* mode = glfwGetVideoMode(glfwGetPrimaryMonitor());
    int w = 0.8 * mode->height;
    int h = 0.5 * mode->height;
    int x = 0.5 * (mode->width - w);
    int y = 0.5 * (mode->height - h);

    // set OpenGL version
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);

    // set active stereo mode
    if (stereoMode == C_STEREO_ACTIVE)
    {
        glfwWindowHint(GLFW_STEREO, GL_TRUE);
    }
    else
    {
        glfwWindowHint(GLFW_STEREO, GL_FALSE);
    }

    // create display context
    window = glfwCreateWindow(w, h, "CHAI3D", NULL, NULL);
    if (!window)
    {
        cout << "failed to create window" << endl;
        cSleepMs(1000);
        glfwTerminate();
        return 1; //tool->enableDynamicObjects(true); //BORRAR
    }

    // get width and height of window
    glfwGetWindowSize(window, &width, &height);

    // set position of window
    glfwSetWindowPos(window, x, y);

    // set key callback
    glfwSetKeyCallback(window, keyCallback);

    // set current display context
    glfwMakeContextCurrent(window);

    // sets the swap interval for the current display context
    glfwSwapInterval(swapInterval);

    // set mouse position callback
    glfwSetCursorPosCallback(window, mouseMotionCallback);

    // set mouse button callback
    glfwSetMouseButtonCallback(window, mouseButtonCallback);

#ifdef GLEW_VERSION
    // initialize GLEW library
    if (glewInit() != GLEW_OK)
    {
        cout << "failed to initialize GLEW library" << endl;
        glfwTerminate();
        return 1;
    }
#endif

    //--------------------------------------------------------------------------
    // WORLD - CAMERA - LIGHTING
    //--------------------------------------------------------------------------

    // create a new world.
    world = new cWorld();

    // set the background color of the environment
    world->m_backgroundColor.setWhite();

    // create a camera and insert it into the virtual world
    camera = new cCamera(world);
    world->addChild(camera);

    // position and orient the camera
    camera->set(cVector3d(2.5, 100.0, 0.6),    // camera position (eye)
        cVector3d(0.0, 0.0, 0.0),    // lookat position (target)
        cVector3d(0.0, 0.0, 1.0));   // direction of the (up) vector

    // set the near and far clipping planes of the camera
    // anything in front or behind these clipping planes will not be rendered
    camera->setClippingPlanes(0.01, 10.0);

    // set stereo mode
    camera->setStereoMode(stereoMode);

    // set stereo eye separation and focal length (applies only if stereo is enabled)
    camera->setStereoEyeSeparation(0.03);
    camera->setStereoFocalLength(3.0);

    // set vertical mirrored display mode
    camera->setMirrorVertical(mirroredDisplay);

    // create a light source
    light = new cDirectionalLight(world);

    // attach light to camera
    camera->addChild(light);

    // enable light source
    light->setEnabled(true);

    // position the light source
    light->setLocalPos(0.0, 0.5, 0.0);

    // define the direction of the light beam
    light->setDir(-3.0, -0.5, 0.0);

    camera->setSphericalDeg(double(3.5),
        double(90),
        double(7.0)
    );
    // crear luz aguja
    needle_light = new cSpotLight(world);

    cCamera* cameraTool = new cCamera(world);
    // attach light to camera
    cameraTool->addChild(needle_light);

    // enable light source
    needle_light->setDisplaySettings(0.015, 1, true);
    needle_light->setEnabled(true);
    needle_light->rotateAboutGlobalAxisDeg(cVector3d(0, 1, 0), 90);
    needle_light->setLocalPos(0, 0, 0);


    //--------------------------------------------------------------------------
    // HAPTIC DEVICES / TOOLS
    //--------------------------------------------------------------------------

    // create a haptic device handler
    handler = new cHapticDeviceHandler();

    // get access to the first available haptic device found
    handler->getDevice(hapticDevice, 0);

    // retrieve information about the current haptic device
    cHapticDeviceInfo hapticDeviceInfo = hapticDevice->getSpecifications();

    // create a tool (cursor) and insert into the world
    tool = new cToolCursor(world);
    world->addChild(tool);

    // connect the haptic device to the virtual tool
    tool->setHapticDevice(hapticDevice);

    // if the haptic device has a gripper, enable it as a user switch
    hapticDevice->setEnableGripperUserSwitch(true);

    // define the radius of the tool (sphere)
    double toolRadius = 0.02;

    // define a radius for the tool
    tool->setRadius(toolRadius);

    // hide the device sphere. only show proxy.
    tool->setShowContactPoints(true, false);

    // create a white cursor
    tool->m_hapticPoint->m_sphereProxy->m_material->setWhite();

    // enable if objects in the scene are going to rotate of translate
    // or possibly collide against the tool. If the environment
    // is entirely static, you can set this parameter to "false"
    // NO SE MUY BIEN SI ESTO ESTA BIEN ASI
    tool->enableDynamicObjects(true);

    // map the physical workspace of the haptic device to a larger virtual workspace.
    tool->setWorkspaceRadius(1.0);

    // haptic forces are enabled only if small forces are first sent to the device;
    // this mode avoids the force spike that occurs when the application starts when
    // the tool is located inside an object for instance.
    tool->setWaitForSmallForce(true);

    // start the haptic tool
    tool->start();

    //--------------------------------------------------------------------------
    // COMPOSE OBJECTS
    //--------------------------------------------------------------------------

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "caja_in"
    /////////////////////////////////////////////////////////////////////////

    // create a virtual mesh
    caja_in = new cMultiMesh();

    // load an object file
    bool fileload;
    fileload = caja_in->loadFromFile(RESOURCE_PATH("../resources/models/caja/CAJA4.stl"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = caja_in->loadFromFile("../../../bin/resources/models/caja/CAJA4.stl");
#endif
    }
    if (!fileload)
    {
        printf("Error - 3D Model failed to load correctly 444444444444444444.\n");
        close();
        return (-1);
    }

    world->addChild(caja_in);

    // set the position and orientation of the object at the center of the world
    caja_in->setLocalPos(-1.4, -2.035, -0.785);
    caja_in->rotateAboutGlobalAxisDeg(cVector3d(0.0, 0.0, 1.0), 90);

    // make the outside of the tooth rendered in semi-transparent
    caja_in->getMesh(0)->setUseTransparency(false);
    caja_in->getMesh(0)->setTransparencyLevel(transparencyLevelInternalObjects);

    // resize tooth to screen
    caja_in->scale(0.01);
    //caja_in->getMesh(0)->m_material->setWhite();

    caja_in->getMesh(0)->m_texture = cTexture2d::create();
    fileload = caja_in->getMesh(0)->m_texture->loadFromFile(RESOURCE_PATH("../resources/images/spheremap-3.jpg"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = caja_in->getMesh(0)->m_texture->loadFromFile("../../../bin/resources/images/spheremap-3.jpg");
#endif
    }
    if (!fileload)
    {
        cout << "Error - Texture image failed to load correctly." << endl;
        close();
        return (-1);
    }

    caja_in->getMesh(0)->m_texture->setSphericalMappingEnabled(true);
    caja_in->getMesh(0)->setUseTexture(true);
    caja_in->getMesh(0)->m_material->setWhite();

    // set haptic properties
    caja_in->getMesh(0)->m_material->setStiffness(100);


    /////////////////////////////////////////////////////////////////////////
    // OBJECT "caja_out"
    /////////////////////////////////////////////////////////////////////////

    // create a virtual mesh
    caja_out = new cMultiMesh();

    // load an object file
    fileload = caja_out->loadFromFile(RESOURCE_PATH("../resources/models/caja/CAJA2.2.stl"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = caja_out->loadFromFile("../../../bin/resources/models/caja/CAJA2.2.stl");
#endif
    }
    if (!fileload)
    {
        printf("Error - 3D Model failed to load correctly 2222222222222222.\n");
        close();
        return (-1);
    }

    world->addChild(caja_out);

    // set the position and orientation of the object at the center of the world
    caja_out->setLocalPos(-1.4, -2.035, -0.785);
    caja_out->rotateAboutGlobalAxisDeg(cVector3d(0.0, 0.0, 1.0), 90);

    // make the outside of the tooth rendered in semi-transparent
    caja_out->getMesh(0)->setUseTransparency(false);
    caja_out->getMesh(0)->setTransparencyLevel(transparencyLevel);

    // resize tooth to screen
    caja_out->scale(0.01);
    caja_out->getMesh(0)->m_material->setGreenChartreuse();

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "NEEDLE"
    /////////////////////////////////////////////////////////////////////////

    // create a new mesh.
    needle = new cMesh();//mesh normal

    //build needle using a cone primitive
    cCreateCone(needle,
        2.5,//largo
        0.01,//radio peque
        0.05,//radio grande
        20,//triangulos(cono poligonal) cuantas caras tiene ese cono, con 20 tiene pinta de ser cono
        1,//cuantos anillos tiene en la cara
        1,
        true, //nos fijamos en el 7 tapa inferior
        true,//tapa superior
        cVector3d(0, 0, 0),//poiscion
        cMatrix3d(cVector3d(0, 1, 0), 1.571)//matriz de rotacion, esta en rad = pi/2
    );

    // set material color
    needle->m_material->setBlueCornflower(); //color azul

    // remove the collision detector. we do not want to compute any
    // force feedback rendering on the object itself.
    //needle->deleteCollisionDetector(true);

    // attach needle to tool haces q sea parte d euna tool, para poder mover y etc
    tool->m_image->addChild(needle);


    /////////////////////////////////////////////////////////////////////////
    // VARIABLES FUERZAS
    /////////////////////////////////////////////////////////////////////////

    double workspaceScaleFactor = tool->getWorkspaceScaleFactor();
    double maxStiffness = hapticDeviceInfo.m_maxLinearStiffness / workspaceScaleFactor;
    double maxLinearForce = cMin(hapticDeviceInfo.m_maxLinearForce, 7.0);
    double maxDamping = hapticDeviceInfo.m_maxLinearDamping / workspaceScaleFactor;

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "ESFERA1"
    /////////////////////////////////////////////////////////////////////////

    // create a new mesh.
   /* esfera1 = new cMesh();//mesh normal

    //build esfera1 using sphere primitive
    cCreateSphere(esfera1,
        0.16,//radio
        10,//longitudes
        10,//latitudes
        cVector3d(-1.09, 0.3, -0.073)//posicion
    );

    world->addChild(esfera1);
    // set material color and transparency
    esfera1->m_material->setWhite();
    esfera1->setTransparencyLevel(transparencyLevelInternalObjects);

    // load texture map
    esfera1->m_texture = cTexture2d::create();
    fileload = esfera1->m_texture->loadFromFile(RESOURCE_PATH("../resources/images/brownboard.jpg"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = esfera1->m_texture->loadFromFile("../../../bin/resources/images/brownboard.jpg");
#endif
    }
    if (!fileload)
    {
        cout << "Error - Texture image failed to load correctly 5555555555555555." << endl;
        close();
        return (-1);
    }
    // set graphic properties
    esfera1->m_material->m_ambient.set(0.1, 0.1, 0.6, 0.5);
    esfera1->m_material->setWhite();
    esfera1->setUseTexture(true);
    esfera1->m_texture->setSphericalMappingEnabled(true);
    // properties
    esfera1->setStiffness(0.9 * maxStiffness);
    // set haptic properties
    esfera1->m_material->setStickSlipForceMax(0.9 * maxLinearForce);// % of maximum linear force
    esfera1->m_material->setStickSlipStiffness(0.9 * maxStiffness); // % of maximum linear stiffness
    // create a haptic stick-slip effect
     // crea efecto de frenazos por el efecto del azúcar -> debe ser muy leve
    esfera1->createEffectStickSlip();*/
    cShapeSphere* esfera1;
    // create a sphere by defini its radius
    esfera1 = new cShapeSphere(0.15);

    // add object to world
    world->addChild(esfera1);

    // set the position of the object at the center of the world
    esfera1->setLocalPos(-1.09, 0.3, -0.073);

    // load texture map
    esfera1->m_texture = cTexture2d::create();
    fileload = esfera1->m_texture->loadFromFile(RESOURCE_PATH("../resources/images/spheremap-2.jpg"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = esfera1->m_texture->loadFromFile("../../../bin/resources/images/spheremap-2.jpg");
#endif
    }
    if (!fileload)
    {
        cout << "Error - Texture image failed to load correctly." << endl;
        close();
        return (-1);
    }

    // set graphic properties
    esfera1->m_texture->setSphericalMappingEnabled(true);
    esfera1->m_material->m_ambient.set(0.1, 0.1, 0.6, 0.5);
    esfera1->m_material->m_diffuse.set(0.3, 0.3, 0.9, 0.5);
    esfera1->m_material->m_specular.set(1.0, 1.0, 1.0, 0.5);
    esfera1->m_material->setWhite();
    esfera1->setUseTexture(true);

    esfera1->m_material->setStickSlipForceMax(0.32 * maxLinearForce);// % of maximum linear force
    esfera1->m_material->setStickSlipStiffness(0.32 * maxStiffness); // % of maximum linear stiffness

    // create a haptic stick-slip effect
    esfera1->createEffectStickSlip();

    esfera1->m_material->setViscosity(0.1*maxDamping);    // % of maximum linear damping

   // create a haptic viscous effect
    esfera1->createEffectViscosity();

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "ESFERA2"
    /////////////////////////////////////////////////////////////////////////

    // create a new mesh.
    /*esfera2 = new cMesh();//mesh normal

    //build esfera2 using sphere primitive
    cCreateSphere(esfera2,
        0.155,//radio
        10,//longitudes
        10,//latitudes
        cVector3d(-1.8, 0.343, -0.368)//posicion
    );

    world->addChild(esfera2);
    // set material color and transparency
    esfera2->m_material->setWhite();
    esfera2->setTransparencyLevel(transparencyLevelInternalObjects);


    world->addChild(esfera1);
    // set material color and transparency
    esfera2->m_material->setWhite();
    esfera2->setTransparencyLevel(transparencyLevelInternalObjects);

    // load texture map
    esfera2->m_texture = cTexture2d::create();
    fileload = esfera2->m_texture->loadFromFile(RESOURCE_PATH("../resources/images/gominolas2.jpg"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = esfera2->m_texture->loadFromFile("../../../bin/resources/images/gominlas2.jpg");
#endif
    }
    if (!fileload)
    {
        cout << "Error - Texture image failed to load correctly 5555555555555555." << endl;
        close();
        return (-1);
    }
    // set graphic properties
    esfera2->m_material->m_ambient.set(0.1, 0.1, 0.6, 0.5);
    esfera2->m_material->setWhite();
    esfera2->setUseTexture(true);
    esfera2->m_texture->setSphericalMappingEnabled(true);
    // properties
    esfera2->setStiffness(0.5 * maxStiffness);
    // set haptic properties
    esfera2->m_material->setStickSlipForceMax(0.5 * maxLinearForce);// % of maximum linear force
    esfera2->m_material->setStickSlipStiffness(0.5 * maxStiffness); // % of maximum linear stiffness
    // create a haptic stick-slip effect
     // crea efecto de frenazos por el efecto del azúcar -> debe ser muy leve
    esfera2->createEffectStickSlip();*/


    /////////////////////////////////////////////////////////////////////////
    // OBJECT 0: "MAGNET"
    /////////////////////////////////////////////////////////////////////////

    cShapeSphere* esfera2;
    // create a sphere and define its radius
    esfera2= new cShapeSphere(0.155);

    // add object to world
    world->addChild(esfera2);

    // set the position of the object at the center of the world
    esfera2->setLocalPos(-1.8, 0.343, -0.368);

    // load texture map
    bool fileload5;
    esfera2->m_texture = cTexture2d::create();
    fileload = esfera2->m_texture->loadFromFile(RESOURCE_PATH("../resources/images/spheremap-3.jpg"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = esfera2->m_texture->loadFromFile("../../../bin/resources/images/spheremap-3.jpg");
#endif
    }
    if (!fileload)
    {
        cout << "Error - Texture image failed to load correctly." << endl;
        close();
        return (-1);
    }

    // set graphic properties
    esfera2->m_texture->setSphericalMappingEnabled(true);
    esfera2->setUseTexture(true);
    esfera2->m_material->setWhite();

    // set haptic properties
    esfera2->m_material->setStiffness(0.4 * maxStiffness);          // % of maximum linear stiffness
    esfera2->m_material->setMagnetMaxForce(0.6 * maxLinearForce);   // % of maximum linear force 
    esfera2->m_material->setMagnetMaxDistance(0.15);
    esfera2->m_material->setViscosity(0.1 * maxDamping);            // % of maximum linear damping

    // create a haptic surface effect
    esfera2->createEffectSurface();

    // create a haptic magnetic effect
    esfera2->createEffectMagnetic();

    // create a haptic viscous effect
    esfera2->createEffectViscosity();

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "ESFERA3"
    /////////////////////////////////////////////////////////////////////////

   /* // create a new mesh.
    esfera3 = new cMesh();//mesh normal

    //build esfera3 using sphere primitive
    cCreateSphere(esfera3,
        0.13,//radio
        10,//longitudes
        10,//latitudes
        cVector3d(-0.746, -0.343, -0.354)//posicion
    );

    world->addChild(esfera3);
    // set material color and transparency
    esfera3->m_material->setWhite();
    esfera3->setTransparencyLevel(transparencyLevelInternalObjects);

    world->addChild(esfera1);
    // set material color and transparency
    esfera3->m_material->setWhite();
    esfera3->setTransparencyLevel(transparencyLevelInternalObjects);

    // load texture map
    esfera3->m_texture = cTexture2d::create();
    fileload = esfera3->m_texture->loadFromFile(RESOURCE_PATH("../resources/images/brownboard.jpg"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = esfera3->m_texture->loadFromFile("../../../bin/resources/images/brownboard.jpg");
#endif
    }
    if (!fileload)
    {
        cout << "Error - Texture image failed to load correctly 5555555555555555." << endl;
        close();
        return (-1);
    }
    // set graphic properties
    esfera3->m_material->m_ambient.set(0.1, 0.1, 0.6, 0.5);
    esfera3->m_material->setWhite();
    esfera3->setUseTexture(true);
    esfera3->m_texture->setSphericalMappingEnabled(true);
    // proerties
    esfera3->setStiffness(0.9 * maxStiffness);
    // set haptic properties
    esfera3->m_material->setStickSlipForceMax(0.9 * maxLinearForce);// % of maximum linear force
    esfera3->m_material->setStickSlipStiffness(0.9 * maxStiffness); // % of maximum linear stiffness
    // create a haptic stick-slip effect
     // crea efecto de frenazos por el efecto del azúcar -> debe ser muy leve
    esfera3->createEffectStickSlip();*/
    //PRUEBA SANTI

    cShapeSphere* esfera3;
    // create a sphere by defini its radius
    esfera3 = new cShapeSphere(0.133);

    // add object to world
    world->addChild(esfera3);

    // set the position of the object at the center of the world
    esfera3->setLocalPos(-0.746, -0.346, -0.354);

    // load texture map
    esfera3->m_texture = cTexture2d::create();
    fileload = esfera3->m_texture->loadFromFile(RESOURCE_PATH("../resources/images/spheremap-5.jpg"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = esfera3->m_texture->loadFromFile("../../../bin/resources/images/spheremap-5.jpg");
#endif
    }
    if (!fileload)
    {
        cout << "Error - Texture image failed to load correctly." << endl;
        close();
        return (-1);
    }

    // set graphic properties
    esfera3->m_texture->setSphericalMappingEnabled(true);
    esfera3->m_material->m_ambient.set(0.1, 0.1, 0.6, 0.5);
    esfera3->m_material->m_diffuse.set(0.3, 0.3, 0.9, 0.5);
    esfera3->m_material->m_specular.set(1.0, 1.0, 1.0, 0.5);
    esfera3->m_material->setWhite();
    esfera3->setUseTexture(true);

    // set haptic properties
    esfera3->m_material->setStickSlipForceMax(0.98 * maxLinearForce);// % of maximum linear force
    esfera3->m_material->setStickSlipStiffness(0.98 * maxStiffness); // % of maximum linear stiffness

    // create a haptic stick-slip effect
    esfera3->createEffectStickSlip();

    esfera3->m_material->setViscosity(100);    // % of maximum linear damping

   // create a haptic viscous effect
    esfera3->createEffectViscosity();

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "CUBO"
    /////////////////////////////////////////////////////////////////////////

    


    cShapeBox* cubo;
    // create a sphere by defini its radius
    cubo = new cShapeBox(0.18,//length x
        0.167,//length y
        0.158);

    // add object to world
    world->addChild(cubo);

    // set the position of the object at the center of the world
    cubo->setLocalPos(-2.145, -0.337, 0.264);

    // load texture map
    cubo->m_texture = cTexture2d::create();
    fileload = cubo->m_texture->loadFromFile(RESOURCE_PATH("../resources/images/spheremap-5.jpg"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = cubo->m_texture->loadFromFile("../../../bin/resources/images/spheremap-5.jpg");
#endif
    }
    if (!fileload)
    {
        cout << "Error - Texture image failed to load correctly." << endl;
        close();
        return (-1);
    }

    // set graphic properties
    cubo->m_texture->setSphericalMappingEnabled(true);
    cubo->m_material->m_ambient.set(0.1, 0.1, 0.6, 0.5);
    cubo->m_material->m_diffuse.set(0.3, 0.3, 0.9, 0.5);
    cubo->m_material->m_specular.set(1.0, 1.0, 1.0, 0.5);
    cubo->m_material->setWhite();
    cubo->setUseTexture(true);

    // set haptic properties
    cubo->m_material->setStickSlipForceMax(0.98 * maxLinearForce);// % of maximum linear force
    cubo->m_material->setStickSlipStiffness(0.98 * maxStiffness); // % of maximum linear stiffness

    // create a haptic stick-slip effect
    cubo->createEffectStickSlip();

    cubo->m_material->setViscosity(100);    // % of maximum linear damping

   // create a haptic viscous effect
    cubo->createEffectViscosity();

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "CILINDROC"
    /////////////////////////////////////////////////////////////////////////

    // create a new mesh.
    cilindroC = new cMesh();//mesh normal

    //build cilindroC using sphere primitive
    cCreateCylinder(cilindroC,
        0.277,//altura
        0.02,//radio
        10,//num lados
        10,//num alturas
        10,//num anillos
        true,//incluir top
        true,//incluir bottom
        cVector3d(-2.145, -0.42, 0.266),//posicion
        cMatrix3d(cVector3d(1, 0, 0), 1.571)//matriz de rotacion, esta en rad = pi/2
    );

    world->addChild(cilindroC);
    // set material color and transparency
    cilindroC->m_material->setWhite();
    cilindroC->setTransparencyLevel(transparencyLevelInternalObjects);

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "CILINDRO1"
    /////////////////////////////////////////////////////////////////////////

    // create a new mesh.
    cilindro1 = new cMesh();//mesh normal

    //build cilindro1 using sphere primitive
    cCreateCylinder(cilindro1,
        0.27,//altura
        0.021,//radio
        10,//num lados
        10,//num alturas
        10,//num anillos
        true,//incluir top
        true,//incluir bottom
        cVector3d(-1.092, 0.7, -0.07),//posicion
        cMatrix3d(cVector3d(1, 0, 0), 1.571)//matriz de rotacion, esta en rad = pi/2
    );

    world->addChild(cilindro1);
    // set material color and transparency
    cilindro1->m_material->setWhite();
    cilindro1->setTransparencyLevel(transparencyLevelInternalObjects);

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "CILINDRO2"
    /////////////////////////////////////////////////////////////////////////

    // create a new mesh.
    cilindro2 = new cMesh();//mesh normal

    //build cilindro2 using sphere primitive
    cCreateCylinder(cilindro2,
        0.208,//altura
        0.025,//radio
        10,//num lados
        10,//num alturas
        10,//num anillos
        true,//incluir top
        true,//incluir bottom
        cVector3d(-1.772, 0.69, -0.41),//posicion
        cMatrix3d(cVector3d(1, 0, 0), 1.455)//matriz de rotacion, esta en rad = pi/2
    );

    world->addChild(cilindro2);
    // set material color and transparency
    cilindro2->m_material->setWhite();
    cilindro2->setTransparencyLevel(transparencyLevelInternalObjects);

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "CILINDRO3"
    /////////////////////////////////////////////////////////////////////////

    // create a new mesh.
    cilindro3 = new cMesh();//mesh normal

    //build cilindro3 using sphere primitive
    cCreateCylinder(cilindro3,
        0.24,//altura
        0.022,//radio
        10,//num lados
        10,//num alturas
        10,//num anillos
        true,//incluir top
        true,//incluir bottom
        cVector3d(-0.746, -0.343, -0.72)//posicion
    );

    world->addChild(cilindro3);
    // set material color and transparency
    cilindro3->m_material->setWhite();
    cilindro3->setTransparencyLevel(transparencyLevelInternalObjects);

    /////////////////////////////////////////////////////////////////////////
   // OBJECT "CILINDRO"
   /////////////////////////////////////////////////////////////////////////

   // create a new mesh.
    cilindro = new cMesh();//mesh normal

    //build cilindro using sphere primitive
    cCreateCylinder(cilindro,
        0.7,//altura
        0.022,//radio
        10,//num lados
        10,//num alturas
        10,//num anillos
        true,//incluir top
        true,//incluir bottom
        cVector3d(-1.43, 0.006, -0.72)//posicion
    );
    world->addChild(cilindro);
    // set material color and transparency
    cilindro->m_material->setWhite();
    cilindro->setTransparencyLevel(transparencyLevelInternalObjects);
    /////////////////////////////////////////////////////////////////////////
    // OBJECT "bolapalo1"
    /////////////////////////////////////////////////////////////////////////

   //create a new mesh
    bolapalo1 = new cMultiMesh();

    // load a drill like mesh and attach it to the tool
    fileload = bolapalo1->loadFromFile(RESOURCE_PATH("../resources/models/bolapalo1/Segmentation Bola con palo 1.stl"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = bolapalo1->loadFromFile("../../../bin/resources/models/bolapalo1/Segmentation Bola con palo 1.stl");
#endif
    }
    if (!fileload)
    {
        printf("Error - 3D Model failed to load correctly 66666666666666666666.\n");
        close();
        return (-1);
    }

    world->addChild(bolapalo1);

    // set the position and orientation of the object at the center of the world
    bolapalo1->setLocalPos(-1.40, 0.0, -0.53);
    bolapalo1->rotateAboutGlobalAxisDeg(cVector3d(0.0, 0.0, 1.0), 90);

    // make the outside of the tooth rendered in semi-transparent
    bolapalo1->setUseTransparency(false);
    bolapalo1->setTransparencyLevel(transparencyLevel);

    // resize tool mesh model
    bolapalo1->scale(0.01);

    bolapalo1->getMesh(0)->m_material->setRedCrimson();

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "bolapalo2"
    /////////////////////////////////////////////////////////////////////////

    //create a new mesh
    bolapalo2 = new cMultiMesh();

    // load a drill like mesh and attach it to the tool
    fileload = bolapalo2->loadFromFile(RESOURCE_PATH("../resources/models/bolapalo2/Segmentation Bola con palo 2.stl"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = bolapalo2->loadFromFile("../../../bin/resources/models/bolapalo2/Segmentation Bola con palo 2.stl");
#endif
    }
    if (!fileload)
    {
        printf("Error - 3D Model failed to load correctly 77777777777777777777.\n");
        close();
        return (-1);
    }

    world->addChild(bolapalo2);

    // set the position and orientation of the object at the center of the world
    bolapalo2->setLocalPos(-1.40, 0.0, -0.23);
    bolapalo2->rotateAboutGlobalAxisDeg(cVector3d(0.0, 0.0, 1.0), 90);

    // make the outside of the tooth rendered in semi-transparent
    bolapalo2->setUseTransparency(false);
    bolapalo2->setTransparencyLevel(transparencyLevel);

    // resize tool mesh model
    bolapalo2->scale(0.01);

    bolapalo2->getMesh(0)->m_material->setOrangeCoral();

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "bolapalo3"
    /////////////////////////////////////////////////////////////////////////

    //create a new mesh
    bolapalo3 = new cMultiMesh();

    // load a drill like mesh and attach it to the tool
    fileload = bolapalo3->loadFromFile(RESOURCE_PATH("../resources/models/bolapalo3/Segmentation Bola con palo 3.stl"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = bolapalo3->loadFromFile("../../../bin/resources/models/bolapalo3/Segmentation Bola con palo 3.stl");
#endif
    }
    if (!fileload)
    {
        printf("Error - 3D Model failed to load correctly 999999999999999999.\n");
        close();
        return (-1);
    }

    world->addChild(bolapalo3);

    // set the position and orientation of the object at the center of the world
    bolapalo3->setLocalPos(-1.40, 0.0, -0.73);
    bolapalo3->rotateAboutGlobalAxisDeg(cVector3d(0.0, 0.0, 1.0), 90);

    // make the outside of the tooth rendered in semi-transparent
    bolapalo3->setUseTransparency(false);
    bolapalo3->setTransparencyLevel(transparencyLevel);

    // resize tool mesh model
    bolapalo3->scale(0.01);

    bolapalo3->getMesh(0)->m_material->setPinkMediumVioletRed();


    /////////////////////////////////////////////////////////////////////////
    // OBJECT "palo"
    /////////////////////////////////////////////////////////////////////////

    //create a new mesh
    palo = new cMultiMesh();

    // load a drill like mesh and attach it to the tool
    fileload = palo->loadFromFile(RESOURCE_PATH("../resources/models/palo/Segmentation_Palo4.stl"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = palo->loadFromFile("../../../bin/resources/models/palo/Segmentation_Palo4.stl");
#endif
    }
    if (!fileload)
    {
        printf("Error - 3D Model failed to load correctly 12 12 12 12 12.\n");
        close();
        return (-1);
    }

    world->addChild(palo);

    // set the position and orientation of the object at the center of the world
    palo->setLocalPos(-1.40, 0.0, -0.73); //NUEVO
    palo->rotateAboutGlobalAxisDeg(cVector3d(0.0, 0.0, 1.0), 90);

    // make the outside of the tooth rendered in semi-transparent
    palo->setUseTransparency(false);
    palo->setTransparencyLevel(transparencyLevel);

    // resize tool mesh model
    palo->scale(0.01);

    palo->getMesh(0)->m_material->setYellowLightGoldenrod();

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "Cuadradopalo"
    /////////////////////////////////////////////////////////////////////////

    //create a new mesh
    cuadradopalo = new cMultiMesh();

    // load a drill like mesh and attach it to the tool
    fileload = cuadradopalo->loadFromFile(RESOURCE_PATH("../resources/models/cuadradopalo/Segmentation Cuadrado con palo.stl"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = cuadradopalo->loadFromFile("../../../bin/resources/models/cuadradopalo/Segmentation Cuadrado con palo.stl");
#endif
    }
    if (!fileload)
    {
        printf("Error - 3D Model failed to load correctly 1414141414.\n");
        close();
        return (-1);
    }

    world->addChild(cuadradopalo);

    // set the position and orientation of the object at the center of the world
    cuadradopalo->setLocalPos(-1.40, 0.0, 0.17);
    cuadradopalo->rotateAboutGlobalAxisDeg(cVector3d(0.0, 0.0, 1.0), 90);

    // make the outside of the tooth rendered in semi-transparent
    cuadradopalo->setUseTransparency(false);
    cuadradopalo->setTransparencyLevel(transparencyLevel);

    // resize tool mesh model
    cuadradopalo->scale(0.01);

    cuadradopalo->getMesh(0)->m_material->setBlueDarkTurquoise();

    /////////////////////////////////////////////////////////////////////////
    // OBJECT "patatas"
    /////////////////////////////////////////////////////////////////////////

    //create a new mesh
    patatas = new cMultiMesh();

    // load a drill like mesh and attach it to the tool
    fileload = patatas->loadFromFile(RESOURCE_PATH("../resources/models/patatas/patatas.stl"));
    if (!fileload)
    {
#if defined(_MSVC)
        fileload = patatas->loadFromFile("../../../bin/resources/models/patatas/patatas.stl");
#endif
    }
    if (!fileload)
    {
        printf("Error - 3D Model failed to load correctly 15151515.\n");
        close();
        return (-1);
    }

    //bolapalo1->convertToSingleMesh(single_bolapalo1); QUITAR
    world->addChild(patatas);

    // set the position and orientation of the object at the center of the world
    patatas->setLocalPos(-1.44, 0.0, -0.015);
    patatas->rotateAboutGlobalAxisDeg(cVector3d(0.0, 0.0, 1. - 0.05), 90);

    // make the outside of the tooth rendered in semi-transparent
    patatas->setUseTransparency(false);
    patatas->setTransparencyLevel(transparencyLevel);

    // resize tool mesh model
    patatas->scale(0.0035);

    patatas->getMesh(0)->m_material->setYellowLightGoldenrod();

 
    //--------------------------------------------------------------------------
    // SIDE FRAMEBUFFER
    //--------------------------------------------------------------------------



    //----------------INICIO CAMARITA ORII-------------------------
    cCamera* camarita = new cCamera(world);



    camarita->rotateAboutGlobalAxisDeg(cVector3d(0, 0, 1), 160);
    camarita->rotateAboutGlobalAxisDeg(cVector3d(0, 1, 0), 40);
    camarita->setLocalPos(-2.10, 0.7, 0.7);



    frameBuffer2 = cFrameBuffer::create();
    frameBuffer2->setup(camarita);



    viewPanel2 = new cViewPanel(frameBuffer2);
    camera->m_frontLayer->addChild(viewPanel2);
    viewPanel2->setLocalPos(2300, 1200);
    //----------------FIN CAMARITA ORII-------------------------



    // attach camera to tool ancalado aguja a la camara
    needle->addChild(cameraTool); //se ajuste a ella y q la puedas arrastrar a ella
    cameraTool->setLocalPos(0.0, 0.0, 0);

    // create framebuffer for side view
    frameBuffer = cFrameBuffer::create();
    frameBuffer->setup(cameraTool);

    // create panel to display side view
    viewPanel = new cViewPanel(frameBuffer);
    camera->m_frontLayer->addChild(viewPanel);
    viewPanel->setLocalPos(10, 20);



    // colisiones ratón
    bolapalo1->createAABBCollisionDetector(toolRadius);
    bolapalo2->createAABBCollisionDetector(toolRadius);
    bolapalo3->createAABBCollisionDetector(toolRadius);
    palo->createAABBCollisionDetector(toolRadius);
    //cuadradopalo->createAABBCollisionDetector(toolRadius);
    patatas->createAABBCollisionDetector(toolRadius);
    //caja_out->createAABBCollisionDetector(toolRadius);

    //colisiones internas haptico
    caja_in->createAABBCollisionDetector(toolRadius);
    //esfera1->createAABBCollisionDetector(toolRadius);
    //esfera2->createAABBCollisionDetector(toolRadius);
    //esfera3->createAABBCollisionDetector(toolRadius);

    //--------------------------------------------------------------------------
    // WIDGETS
    //--------------------------------------------------------------------------

    // create a font
    font = NEW_CFONTCALIBRI20();

    // create a label to display the haptic and graphic rate of the simulation
    labelRates = new cLabel(font);
    labelRates->m_fontColor.setBlack();
    camera->m_frontLayer->addChild(labelRates);

    // create a small sphere to display a selection hit with the mouse
    sphereSelect = new cShapeSphere(0.005);
    world->addChild(sphereSelect);
    sphereSelect->m_material->setRedCrimson();
    sphereSelect->setShowEnabled(false);
    sphereSelect->setGhostEnabled(true);

    normalSelect = new cShapeLine();
    sphereSelect->addChild(normalSelect);
    normalSelect->m_colorPointA.setRedCrimson();
    normalSelect->m_colorPointB.setRedCrimson();
    normalSelect->setShowEnabled(false);
    normalSelect->setGhostEnabled(true);

    //--------------------------------------------------------------------------
    // WIDGETS
    //--------------------------------------------------------------------------

    // create a font
    font = NEW_CFONTCALIBRI22();

    // create a label to display the haptic and graphic rate of the simulation
    labelRates = new cLabel(font);
    camera->m_frontLayer->addChild(labelRates);

    // set font color
    labelRates->m_fontColor.setBlack();

    // create a background object NUEVO FONDO
    cBackground* background1 = new cBackground();
    // add background to back layer of camera NUEVO FONDO
    camera->m_backLayer->addChild(background1);
    // set aspect ration of background image a constant NUEVO FONDO
    background1->setFixedAspectRatio(true);
    // load an image file NUEVO FONDO
    background1->loadFromFile(RESOURCE_PATH("../resources/images/quirofano.jpg"));
    //transparencia NUEVO
    background1->setTransparencyLevel(0.6);

    // a widget panel
    panel = new cPanel();
    camera->m_frontLayer->addChild(panel);
    panel->setSize(100, 115);
    panel->setCornerRadius(10, 10, 10, 10); //NUEVO
    panel->m_material->setGrayDim();
    panel->setTransparencyLevel(0.8);

    // create some labels
    labelRed = new cLabel(font);
    panel->addChild(labelRed);
    labelRed->setText("red");
    labelRed->setLocalPos(15, 10, 0.1);
    labelRed->m_fontColor.setWhite();

    labelGreen = new cLabel(font);
    panel->addChild(labelGreen);
    labelGreen->setText("green");
    labelGreen->setLocalPos(15, 30, 0.1);
    labelGreen->m_fontColor.setWhite();

    labelBlue = new cLabel(font);
    panel->addChild(labelBlue);
    labelBlue->setText("blue");
    labelBlue->setLocalPos(15, 50, 0.1);
    labelBlue->m_fontColor.setWhite();

    labelOrange = new cLabel(font);
    panel->addChild(labelOrange);
    labelOrange->setText("orange");
    labelOrange->setLocalPos(15, 70, 0.1);
    labelOrange->m_fontColor.setWhite();

    labelYellow = new cLabel(font);
    panel->addChild(labelYellow);
    labelYellow->setText("yellow");
    labelYellow->setLocalPos(15, 90, 0.1);
    labelYellow->m_fontColor.setWhite();

    // create a label with a small message
    labelMessage = new cLabel(font);
    camera->m_frontLayer->addChild(labelMessage);

    // set font colortexture
    labelMessage->m_fontColor.setBlack();

    // set text message
    labelMessage->setText("Select an object to change it's color");

    // set text message position
    labelMessage->setLocalPos(20, 820, 0);

    //posicionpanel
    panel->setLocalPos(20, 700, 0.0);


    //    // TODO ESTO ES NUEVO
    //    //--------------------------------------------------------------------------
    //    // SETUP AUDIO MATERIAL ENCENDER
    //    //--------------------------------------------------------------------------
    //
    //    // create an audio device to play sounds
    //    audioDevice = new cAudioDevice();
    //
    //    // attach audio device to camera
    //    camera->attachAudioDevice(audioDevice);
    //
    //    // create an audio buffer and load audio wave file
    //    audioBuffer1 = new cAudioBuffer();
    //    bool fileload1 = audioBuffer1->loadFromFile(RESOURCE_PATH("../resources/sounds/audio.wav"));
    //    if (!fileload1)
    //    {
    //#if defined(_MSVC)
    //        fileload1 = audioBuffer1->loadFromFile("../../../bin/resources/sounds/audio.wav");
    //
    //        //cloadFilewav
    //#endif
    //    }
    //
    //    // check for errors
    //    if (!fileload1)
    //    {
    //        cout << "Error - Sound file failed to load or initialize correctly." << endl;
    //        close();
    //        return (-1);
    //    }
    //
    //    // here we convert all files to mono. this allows for 3D sound support. if this code
    //    // is commented files are kept in stereo format and 3D sound is disabled. Compare both!
    //    audioBuffer1->convertToMono();
    //
    //    // create an audio source for this tool.
    //    tool->createAudioSource(audioDevice);
    //
    //    // create audio source
    //    audioSource1 = new cAudioSource();
    //
    //    // assign audio buffer to audio source
    //    audioSource1->setAudioBuffer(audioBuffer1);
    //
    //    // loop playing of sound
    //    audioSource1->setLoop(false);
    //
    //    // turn off sound for now
    //    audioSource1->setGain(10.0);
    //
    //    // set pitch
    //    audioSource1->setPitch(0.6);
    //
    //    //play sound
    //    audioSource1->play();
    //
    //    //--------------------------------------------------------------------------
    //    // SETUP AUDIO MATERIAL ENCENDER onof
    //    //--------------------------------------------------------------------------
    //
    //    // create an audio device to play sounds
    //    audioDevice1 = new cAudioDevice();
    //
    //    // attach audio device to camera
    //    camera->attachAudioDevice(audioDevice1);
    //
    //    // create an audio buffer and load audio wave file
    //    audioBuffer2 = new cAudioBuffer();
    //    bool fileload2 = audioBuffer2->loadFromFile(RESOURCE_PATH("../resources/sounds/paper-impact.wav"));
    //    if (!fileload2)
    //    {
    //#if defined(_MSVC)
    //        fileload2 = audioBuffer2->loadFromFile("../../../bin/resources/sounds/paper-impact.wav");
    //
    //        //cloadFilewav
    //#endif
    //    }
    //
    //    // check for errors
    //    if (!fileload2)
    //    {
    //        cout << "Error - Sound file failed to load or initialize correctly." << endl;
    //        close();
    //        return (-1);
    //    }
    //
    //    // here we convert all files to mono. this allows for 3D sound support. if this code
    //    // is commented files are kept in stereo format and 3D sound is disabled. Compare both!
    //    audioBuffer2->convertToMono();
    //
    //    // create an audio source for this tool.
    //    tool->createAudioSource(audioDevice1);
    //
    //    // create audio source
    //    audioSource2 = new cAudioSource();
    //
    //    // assign audio buffer to audio source
    //    audioSource2->setAudioBuffer(audioBuffer2);
    //
    //    // loop playing of sound
    //    audioSource2->setLoop(false);
    //
    //    // turn off sound for now
    //    audioSource2->setGain(10.0);
    //
    //    // set pitch
    //    audioSource2->setPitch(0.6);
    //
    //    //hasta aqui NUEVO SONIDO

    //--------------------------------------------------------------------------
    // WIDGETS
    //--------------------------------------------------------------------------

    //Light on/off

    // a widget light panel
    lightpanel = new cPanel();
    camera->m_frontLayer->addChild(lightpanel);
    lightpanel->setSize(170, 50);
    lightpanel->setCornerRadius(10, 10, 10, 10); //NUEVO
    lightpanel->m_material->setBlack();
    lightpanel->setTransparencyLevel(1);

    // light panel label
    labelONOFF = new cLabel(font);
    lightpanel->addChild(labelONOFF);
    labelONOFF->setText("TURN LIGHT OFF");
    labelONOFF->setLocalPos(22, 15, 0);
    labelONOFF->m_fontColor.setWhite();

    //posicion panel NUEVO CORDE
    lightpanel->setLocalPos(20, 900, 0.0);

    //panel posiciones
    pospanel = new cPanel();
    camera->m_frontLayer->addChild(pospanel);
    pospanel->setSize(100, 80);
    pospanel->setCornerRadius(10, 10, 10, 10);
    pospanel->m_material->setGrayDim();
    pospanel->setTransparencyLevel(0.8);

    //front view
    frontview = new cLabel(font);
    pospanel->addChild(frontview);
    frontview->setText("front view");
    frontview->setLocalPos(15, 10, 0.1);
    frontview->m_fontColor.setWhite();

    //sideview
    sideview = new cLabel(font);
    pospanel->addChild(sideview);
    sideview->setText("side view");
    sideview->setLocalPos(15, 30, 0.1);
    sideview->m_fontColor.setWhite();

    //topview
    topview = new cLabel(font);
    pospanel->addChild(topview);
    topview->setText("top view");
    topview->setLocalPos(15, 50, 0.1);
    topview->m_fontColor.setWhite();

    pospanel->setLocalPos(20, 500, 0);
    //--------------------------------------------------------------------------
    // START SIMULATION
    //--------------------------------------------------------------------------

    // create a thread which starts the main haptics rendering loop
    hapticsThread = new cThread();
    hapticsThread->start(updateHaptics, CTHREAD_PRIORITY_HAPTICS);

    // setup callback when application exits
    atexit(close);

    //--------------------------------------------------------------------------
    // MAIN GRAPHIC LOOP
    //--------------------------------------------------------------------------

    // main graphic loop
    while (!glfwWindowShouldClose(window))
    {
        // get width and height of window
        windowSizeCallback(window, 0, 0);

        // render graphics
        updateGraphics();

        // swap buffers
        glfwSwapBuffers(window);

        // process events
        glfwPollEvents();

        // signal frequency counter
        freqCounterGraphics.signal(1);
    }

    // close window
    glfwDestroyWindow(window);

    // terminate GLFW library
    glfwTerminate();

    // exit
    return 0;
}

//------------------------------------------------------------------------------

void windowSizeCallback(GLFWwindow* a_window, int a_width, int a_height)
{
    // update window size
    glfwGetFramebufferSize(window, &width, &height);

    // update size of framebuffer and view panel
    int side = 0.3 * cMin(width, height);
    frameBuffer->setSize(side, side);




    int radius = 0.25 * side;
    viewPanel->setSize(side, side);
    viewPanel->setCornerRadius(radius, radius, radius, radius);



    // update size of framebuffer and view panel
    frameBuffer2->setSize(side, side); //ORII



    viewPanel2->setSize(side, side); //ORII
    viewPanel2->setCornerRadius(radius, radius, radius, radius); //ORII
}

//------------------------------------------------------------------------------

void errorCallback(int a_error, const char* a_description)
{
    cout << "Error: " << a_description << endl;
}

//------------------------------------------------------------------------------

void keyCallback(GLFWwindow* a_window, int a_key, int a_scancode, int a_action, int a_mods)
{
    // filter calls that only include a key press
    if ((a_action != GLFW_PRESS) && (a_action != GLFW_REPEAT))
    {
        return;
    }

    // option - exit
    else if ((a_key == GLFW_KEY_ESCAPE) || (a_key == GLFW_KEY_Q))
    {
        glfwSetWindowShouldClose(a_window, GLFW_TRUE);
    }

    // option - decrease box transparency
    else if (a_key == GLFW_KEY_K)
    {
        // decrease transparency level
        transparencyLevel = transparencyLevel - 0.1;
        if (transparencyLevel < 0.0) { transparencyLevel = 0.0; }

        // apply changes to caja
        caja_out->getMesh(0)->setTransparencyLevel(transparencyLevel);
        caja_out->getMesh(0)->setUseTransparency(true);

        // if object is almost transparent, make it invisible
        if (transparencyLevel < 0.1)
        {
            caja_out->getMesh(0)->setShowEnabled(false, true);
            caja_out->getMesh(0)->setHapticEnabled(false, true);
        }
    }
    // option - increase box transparency
    else if (a_key == GLFW_KEY_J)
    {
        // increase transparency level
        transparencyLevel = transparencyLevel + 0.1;
        if (transparencyLevel > 1.0) { transparencyLevel = 1.0; }

        // apply changes to caja
        caja_out->getMesh(0)->setTransparencyLevel(transparencyLevel);

        // make object visible
        if (transparencyLevel >= 0.1)
        {
            caja_out->getMesh(0)->setShowEnabled(true, true);
            caja_out->getMesh(0)->setHapticEnabled(true, true);
        }

        // disable transparency is transparency level is set to 1.0
        if (transparencyLevel == 1.0)
        {
            caja_out->getMesh(0)->setUseTransparency(false);
        }
    }

    // option - toggle fullscreen
    else if (a_key == GLFW_KEY_F)
    {
        // toggle state variable
        fullscreen = !fullscreen;

        // get handle to monitor
        GLFWmonitor* monitor = glfwGetPrimaryMonitor();

        // get information about monitor
        const GLFWvidmode* mode = glfwGetVideoMode(monitor);

        // set fullscreen or window mode
        if (fullscreen)
        {
            glfwSetWindowMonitor(window, monitor, 0, 0, mode->width, mode->height, mode->refreshRate);
            glfwSwapInterval(swapInterval);
        }
        else
        {
            int w = 0.8 * mode->height;
            int h = 0.5 * mode->height;
            int x = 0.5 * (mode->width - w);
            int y = 0.5 * (mode->height - h);
            glfwSetWindowMonitor(window, NULL, x, y, w, h, mode->refreshRate);
            glfwSwapInterval(swapInterval);
        }
    }

    // option - toggle vertical mirroring
    else if (a_key == GLFW_KEY_M)
    {
        mirroredDisplay = !mirroredDisplay;
        camera->setMirrorVertical(mirroredDisplay);
    }
    //move down
    else if (a_key == GLFW_KEY_S)
    {
        /*cVector3d needle_pos, new_pos;
        cVector3d movx(0.05, 0, 0);

        needle_pos = needle->getLocalPos();
        new_pos = needle_pos + movx;
        needle->setLocalPos(new_pos);*/
        cVector3d needle_pos, new_pos;
        cVector3d movz(0, 0, 0.1);

        needle_pos = haptic_pos;
        new_pos = needle_pos - movz;
        haptic_pos = new_pos;
    }
    //move up
    else if (a_key == GLFW_KEY_W)
    {
        /*cVector3d needle_pos, new_pos;
        cVector3d movx(0.05, 0, 0);

        needle_pos = needle->getLocalPos();
        new_pos = needle_pos - movx;
        needle->setLocalPos(new_pos);*/
        cVector3d needle_pos, new_pos;
        cVector3d movz(0, 0, 0.1);

        needle_pos = haptic_pos;
        new_pos = needle_pos + movz;
        haptic_pos = new_pos;
    }
    //move right
    else if (a_key == GLFW_KEY_D)
    {
        cVector3d needle_pos, new_pos;
        cVector3d movy(0, 0.1, 0);

        needle_pos = haptic_pos;
        new_pos = needle_pos + movy;
        haptic_pos = new_pos;
    }
    //move left
    else if (a_key == GLFW_KEY_A)
    {
        cVector3d needle_pos, new_pos;
        cVector3d movy(0, 0.1, 0);

        needle_pos = haptic_pos;
        new_pos = needle_pos - movy;
        haptic_pos = new_pos;
    }
    //incline right
    else if (a_key == GLFW_KEY_RIGHT)
    {
        cVector3d axis(0, 0, 1); double angle;
        angle = -5;
        needle->rotateAboutGlobalAxisDeg(axis, angle);
    }
    //incline left
    else if (a_key == GLFW_KEY_LEFT)
    {
        cVector3d axis(0, 0, 1); double angle;
        angle = 5;
        needle->rotateAboutGlobalAxisDeg(axis, angle);
    }
    //incline up
    else if (a_key == GLFW_KEY_UP)
    {
        cVector3d axis(0, 1, 0); double angle;//eje z derecha izquierda, eje de rot es el z
        angle = 5;//para subir y bajar
        needle->rotateAboutGlobalAxisDeg(axis, angle);//rotacion de 5 en 5 al rededor de un eje
    }
    //incline down
    else if (a_key == GLFW_KEY_DOWN)
    {
        cVector3d axis(0, 1, 0); double angle;
        angle = -5;
        needle->rotateAboutGlobalAxisDeg(axis, angle);
    }
    //zoom
    else if (a_key == GLFW_KEY_I) //modificar la coordenada polar del radio de la camara
    {
        double cam_r, modified_r;

        cam_r = camera->getSphericalRadius();
        modified_r = cam_r - 0.1;
        camera->setSphericalRadius(modified_r);
    }
    else if (a_key == GLFW_KEY_O)
    {
        double cam_r, modified_r;

        cam_r = camera->getSphericalRadius();
        modified_r = cam_r + 0.1;
        camera->setSphericalRadius(modified_r);
    }
    //pos 1
    else if (a_key == GLFW_KEY_1)
    {
        cVector3d new_pos(0, -0.35, 0.33); //(y,x,z)
        haptic_pos = new_pos;
        needle->setLocalRot(cMatrix3d(cVector3d(0, 1, 0), 0));
    }

    //pos 2
    else if (a_key == GLFW_KEY_2)
    {
        cVector3d new_pos(0, 0, 0.33);
        haptic_pos = new_pos;
        needle->setLocalRot(cMatrix3d(cVector3d(0, 1, 0), 0));
    }

    //pos 3
    else if (a_key == GLFW_KEY_3)
    {
        cVector3d new_pos(0, 0.35, 0.33);
        haptic_pos = new_pos;
        needle->setLocalRot(cMatrix3d(cVector3d(0, 1, 0), 0));
    }

    //pos 4
    else if (a_key == GLFW_KEY_4)
    {
        cVector3d new_pos(0, -0.35, 0);
        haptic_pos = new_pos;
        needle->setLocalRot(cMatrix3d(cVector3d(0, 1, 0), 0));
    }

    //pos 5
    else if (a_key == GLFW_KEY_5)
    {
        cVector3d new_pos(0, 0, 0);
        haptic_pos = new_pos;
        needle->setLocalRot(cMatrix3d(cVector3d(0, 1, 0), 0)); //inclinacion se horizontal, se restablezca a la inicial
    }

    //pos 6
    else if (a_key == GLFW_KEY_6)
    {
        cVector3d new_pos(0, 0.35, 0);
        haptic_pos = new_pos;
        needle->setLocalRot(cMatrix3d(cVector3d(0, 1, 0), 0));//coordanadas polares
    }

    //pos 7
    else if (a_key == GLFW_KEY_7)
    {
        cVector3d new_pos(0, -0.35, -0.33);
        haptic_pos = new_pos;
        needle->setLocalRot(cMatrix3d(cVector3d(0, 1, 0), 0));
    }

    //pos 8
    else if (a_key == GLFW_KEY_8)
    {
        cVector3d new_pos(0, 0, -0.33);
        haptic_pos = new_pos;
        needle->setLocalRot(cMatrix3d(cVector3d(0, 1, 0), 0));
    }

    //pos 9
    else if (a_key == GLFW_KEY_9)
    {
        cVector3d new_pos(0, 0.35, -0.33);
        haptic_pos = new_pos;
        needle->setLocalRot(cMatrix3d(cVector3d(0, 1, 0), 0));
    }



    else if (a_key == GLFW_KEY_E) //ORII
    {
        cCamera* camarita = new cCamera(world);



        cVector3d new_pos(-2.5, -0.7, 0.7);
        camarita->setLocalPos(new_pos);
        camarita->rotateAboutGlobalAxisDeg(cVector3d(0, 0, 1), 200);
        camarita->rotateAboutGlobalAxisDeg(cVector3d(0, 1, 0), 40);
        frameBuffer2 = cFrameBuffer::create();
        frameBuffer2->setup(camarita);
        viewPanel2 = new cViewPanel(frameBuffer2);
        camera->m_frontLayer->addChild(viewPanel2);
        viewPanel2->setLocalPos(2300, 1200);
    }
    else if (a_key == GLFW_KEY_B) //ORII
    {
        cCamera* camarita = new cCamera(world);



        cVector3d new_pos(-0.6, -0.7, 0.7); //2
        camarita->setLocalPos(new_pos);
        camarita->rotateAboutGlobalAxisDeg(cVector3d(0, 0, 1), 340);
        camarita->rotateAboutGlobalAxisDeg(cVector3d(0, 1, 0), -40);
        frameBuffer2 = cFrameBuffer::create();
        frameBuffer2->setup(camarita);
        viewPanel2 = new cViewPanel(frameBuffer2);
        camera->m_frontLayer->addChild(viewPanel2);
        viewPanel2->setLocalPos(2300, 1200);

    }
    else if (a_key == GLFW_KEY_C) //ORII
    {
        cCamera* camarita = new cCamera(world);

        cVector3d new_pos(-0.6, 0.7, 0.7);
        camarita->setLocalPos(new_pos);
        camarita->rotateAboutGlobalAxisDeg(cVector3d(0, 0, 1), 20);
        camarita->rotateAboutGlobalAxisDeg(cVector3d(0, 1, 0), -40);
        frameBuffer2 = cFrameBuffer::create();
        frameBuffer2->setup(camarita);
        viewPanel2 = new cViewPanel(frameBuffer2);
        camera->m_frontLayer->addChild(viewPanel2);
        viewPanel2->setLocalPos(2300, 1200);




    }
    else if (a_key == GLFW_KEY_G) //ORII
    {
        cCamera* camarita = new cCamera(world);



        cVector3d new_pos(-2.5, 0.7, 0.7);
        camarita->setLocalPos(new_pos);
        camarita->rotateAboutGlobalAxisDeg(cVector3d(0, 0, 1), 160); //3
        camarita->rotateAboutGlobalAxisDeg(cVector3d(0, 1, 0), 40);
        frameBuffer2 = cFrameBuffer::create();
        frameBuffer2->setup(camarita);
        viewPanel2 = new cViewPanel(frameBuffer2);
        camera->m_frontLayer->addChild(viewPanel2);
        viewPanel2->setLocalPos(2300, 1200);

    }

}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

void close(void)
{
    // stop the simulation
    simulationRunning = false;

    // wait for graphics and haptics loops to terminate
    while (!simulationFinished) { cSleepMs(100); }

    // close haptic device
    tool->stop();

    // delete resources
    delete hapticsThread;
    delete world;
    delete handler;
}

//------------------------------------------------------------------------------

void updateGraphics(void)
{
    /////////////////////////////////////////////////////////////////////
    // UPDATE WIDGETS
    /////////////////////////////////////////////////////////////////////

    // update haptic and graphic rate data
    labelRates->setText(cStr(freqCounterGraphics.getFrequency(), 0) + " Hz / " +
        cStr(freqCounterHaptics.getFrequency(), 0) + " Hz");

    // update position of label
    labelRates->setLocalPos((int)(0.5 * (width - labelRates->getWidth())), 15);


    /////////////////////////////////////////////////////////////////////
    // RENDER
    /////////////////////////////////////////////////////////////////////

    // update shadow maps (if any)
    world->updateShadowMaps(false, mirroredDisplay);

    // render side framebuffer
    frameBuffer->renderView();



    // render side framebuffer
    frameBuffer2->renderView(); //ORII

    // render world
    camera->renderView(width, height);

    // wait until all GL commands are completed
    glFinish();

    // check for any OpenGL errors
    GLenum err = glGetError();
    if (err != GL_NO_ERROR) cout << "Error: " << gluErrorString(err) << endl;
}

//------------------------------------------------------------------------------

void updateHaptics(void)
{

    // temp variable to store positions and orientations
    // of tooth and drill
    cVector3d lastPosObject;
    cMatrix3d lastRotObject;
    cVector3d lastPosDevice;
    cMatrix3d lastRotDevice;
    cVector3d lastDeviceObjectPos;
    cMatrix3d lastDeviceObjectRot;
    bool firstTime = false;

    // simulation in now running
    simulationRunning = true;
    simulationFinished = false;



    // retrieve information about the current haptic device
    cHapticDeviceInfo info = hapticDevice->getSpecifications();

    double workspaceScaleFactor = tool->getWorkspaceScaleFactor();


    // main haptic simulation loop
    while (simulationRunning)
    {
        /////////////////////////////////////////////////////////////////////
        // SIMULATION TIME
        /////////////////////////////////////////////////////////////////////

        // compute global reference frames for each object
        world->computeGlobalPositions(true);

        // read real position of device Novint Falcon (3DOF)
        cVector3d position_3DOF;
        hapticDevice->getPosition(position_3DOF);
        cVector3d pos_needle;
        pos_needle = tool->getGlobalPos();
        position_3DOF *= workspaceScaleFactor * 3.5; // transform in to workspace scale
        // modify 3DOF position of haptic device to 1DOF for our application
        cVector3d position_1DOF;
        position_1DOF = cVector3d(position_3DOF.x(), haptic_pos.y(), haptic_pos.z());
        //position_1DOF = cVector3d(position_3DOF.x(), 0.35, 0);
        //needle->setLocalPos(position_1DOF);
        tool->setDeviceLocalPos(position_1DOF);

        /////////////////////////////////////////////////////////////////////
        // HAPTIC FORCE COMPUTATION
        /////////////////////////////////////////////////////////////////////
        //hapticDevice->getPosition(tool->getGlobalPos());

        
        // compute interaction forces
        tool->computeInteractionForces();

        // send forces to haptic device
        tool->applyToDevice();
    }
    /////////////////////////////////////////////////////////////////////
            // EXTRAS
            /////////////////////////////////////////////////////////////////////

            // read user-switch status (button 0)
    bool button0, button1, button2, button3;
    button0 = false;
    button1 = false;
    button2 = false;
    button3 = false;

    hapticDevice->getUserSwitch(0, button0);
    hapticDevice->getUserSwitch(1, button1);
    hapticDevice->getUserSwitch(2, button2);
    hapticDevice->getUserSwitch(3, button3);

    if (button0)
    {
        if (needle_light->getEnabled() == true) { //si la luz está encendida
            needle_light->setEnabled(false);
        }
        else if (needle_light->getEnabled() == false) { //si la luz está apagada
            needle_light->setEnabled(true);
        }
    }
    else if (button1)
    {
        // decrease transparency level internal objects
        transparencyLevelInternalObjects = transparencyLevelInternalObjects - 0.1;
        if (transparencyLevel < 0.0) { transparencyLevel = 0.0; }

        // apply changes to internal objects
        esfera1->setTransparencyLevel(transparencyLevelInternalObjects);
        esfera1->setUseTransparency(true);
        esfera2->setTransparencyLevel(transparencyLevelInternalObjects);
        esfera2->setUseTransparency(true);
        esfera3->setTransparencyLevel(transparencyLevelInternalObjects);
        esfera3->setUseTransparency(true);
        cubo->setTransparencyLevel(transparencyLevelInternalObjects);
        cubo->setUseTransparency(true);
        cilindro->setTransparencyLevel(transparencyLevelInternalObjects);
        cilindro->setUseTransparency(true);
        cilindro1->setTransparencyLevel(transparencyLevelInternalObjects);
        cilindro1->setUseTransparency(true);
        cilindro2->setTransparencyLevel(transparencyLevelInternalObjects);
        cilindro2->setUseTransparency(true);
        cilindro3->setTransparencyLevel(transparencyLevelInternalObjects);
        cilindro3->setUseTransparency(true);
        cilindroC->setTransparencyLevel(transparencyLevelInternalObjects);
        cilindroC->setUseTransparency(true);
    }
    else if (button2)
    {
        // increase transparency level internal objects
        transparencyLevelInternalObjects = transparencyLevelInternalObjects + 0.1;
        if (transparencyLevel > 1.0) { transparencyLevel = 1.0; }

        // apply changes to internal objects
        esfera1->setTransparencyLevel(transparencyLevelInternalObjects);
        esfera1->setUseTransparency(true);
        esfera2->setTransparencyLevel(transparencyLevelInternalObjects);
        esfera2->setUseTransparency(true);
        esfera3->setTransparencyLevel(transparencyLevelInternalObjects);
        esfera3->setUseTransparency(true);
        cubo->setTransparencyLevel(transparencyLevelInternalObjects);
        cubo->setUseTransparency(true);
        cilindro->setTransparencyLevel(transparencyLevelInternalObjects);
        cilindro->setUseTransparency(true);
        cilindro1->setTransparencyLevel(transparencyLevelInternalObjects);
        cilindro1->setUseTransparency(true);
        cilindro2->setTransparencyLevel(transparencyLevelInternalObjects);
        cilindro2->setUseTransparency(true);
        cilindro3->setTransparencyLevel(transparencyLevelInternalObjects);
        cilindro3->setUseTransparency(true);
        cilindroC->setTransparencyLevel(transparencyLevelInternalObjects);
        cilindroC->setUseTransparency(true);
    }
    else if (button3)
    {

    }
    else
    {

    }
    /*hapticDevice->getPosition(<p>);
    Modificar la informaci´on de posici´on recibida para obtener un ´unico grado de libertad
        en la herramienta virtual en un entorno est´atico.
        Obtener las fuerzas de colisi´on :
    tool->computeInteractionForces();
    Posicionar el cilindro relativo a la posici´on computada :
    needle->setLocalPos(<X>, <Y>, <Z>)
        Enviar las fuerzas al manipulador :
    tool->applyToDevice();*/ //BORRAR

    // exit haptics thread
    simulationFinished = true;
}

//------------------------------------------------------------------------------

void mouseButtonCallback(GLFWwindow* a_window, int a_button, int a_action, int a_mods)
{


    if (a_button == GLFW_MOUSE_BUTTON_RIGHT && a_action == GLFW_PRESS)
    {
        // store mouse position
        glfwGetCursorPos(window, &mouseX, &mouseY);



        mouseState = MOUSE_SELECTION;
    }

    if (a_button == GLFW_MOUSE_BUTTON_LEFT && a_action == GLFW_PRESS)
    {
        // store mouse position
        glfwGetCursorPos(window, &mouseX, &mouseY);

        // variable for storing collision information
        cCollisionRecorder recorder;
        cCollisionSettings settings;

        // detect for any collision between mouse and front layer widgets
        bool hit = camera->selectFrontLayer(mouseX, (height - mouseY), width, height, recorder, settings);
        if (hit)
        {
            // reset all label font colors to white
            labelRed->m_fontColor.setWhite();
            labelGreen->m_fontColor.setWhite();
            labelBlue->m_fontColor.setWhite();
            labelOrange->m_fontColor.setWhite();
            labelYellow->m_fontColor.setWhite();

            // check mouse selection
            if (recorder.m_nearestCollision.m_object == labelRed)
            {
                labelRed->m_fontColor.setRed();
                if (selectedObject != NULL)
                    selectedObject->m_material->setRedCrimson();
            }
            else if (recorder.m_nearestCollision.m_object == labelGreen)
            {
                labelGreen->m_fontColor.setGreen();
                if (selectedObject != NULL)
                    selectedObject->m_material->setGreenLightSea();
            }
            else if (recorder.m_nearestCollision.m_object == labelBlue)
            {
                labelBlue->m_fontColor.setBlue();
                if (selectedObject != NULL)
                    selectedObject->m_material->setBlueCornflower();
            }
            else if (recorder.m_nearestCollision.m_object == labelOrange)
            {
                labelOrange->m_fontColor.setOrange();
                if (selectedObject != NULL)
                    selectedObject->m_material->setOrangeRed();
            }
            else if (recorder.m_nearestCollision.m_object == labelYellow)
            {
                labelYellow->m_fontColor.setYellow();
                if (selectedObject != NULL)
                    selectedObject->m_material->setYellow();
            }
            else if (recorder.m_nearestCollision.m_object == labelONOFF)
            {
                if (light->getEnabled() == true) {//si la luz esta encendida en el interrup pone apagar aqui

                    labelONOFF->setText("TURN LIGHT ON");
                    labelONOFF->m_fontColor.setGreenLight();
                    lightpanel->m_material->setWhite();
                    light->setEnabled(false);
                    world->m_backgroundColor.setBlack();
                    labelMessage->m_fontColor.setWhite();
                    //audioSource2->play();
                }
                else if (light->getEnabled() == false) {
                    labelONOFF->setText("TURN LIGHT OFF");
                    labelONOFF->m_fontColor.setWhite();
                    lightpanel->m_material->setBlack();
                    light->setEnabled(true);
                    world->m_backgroundColor.setWhite();
                    labelMessage->m_fontColor.setBlack();
                    //audioSource2->play();
                }
            }
            else if (recorder.m_nearestCollision.m_object == topview)
            {
                sideview->m_fontColor.setWhite();
                frontview->m_fontColor.setWhite();

                topview->m_fontColor.setBlack();
                camera->setSphericalRadius(5);
                camera->setSphericalAzimuthDeg(0);
                camera->setSphericalPolarDeg(0);
            }
            else if (recorder.m_nearestCollision.m_object == frontview)
            {
                topview->m_fontColor.setWhite();
                sideview->m_fontColor.setWhite();

                frontview->m_fontColor.setBlack();
                camera->setSphericalRadius(4);
                camera->setSphericalAzimuthDeg(0);
                camera->setSphericalPolarDeg(90);
            }
            else if (recorder.m_nearestCollision.m_object == sideview)
            {
                frontview->m_fontColor.setWhite();
                topview->m_fontColor.setWhite();

                sideview->m_fontColor.setBlack();
                camera->setSphericalRadius(4);
                camera->setSphericalAzimuthDeg(270);
                camera->setSphericalPolarDeg(90);
            }
        }
        else
        {
            // detect for any collision between mouse and world SANTI
            bool hit = camera->selectWorld(mouseX, (height - mouseY), width, height, recorder, settings);
            if (hit)
            {
                sphereSelect->setShowEnabled(true);
                normalSelect->setShowEnabled(true);
                selectedPoint = recorder.m_nearestCollision.m_globalPos;
                sphereSelect->setLocalPos(selectedPoint);
                normalSelect->m_pointA.zero();
                normalSelect->m_pointB = 0.1 * recorder.m_nearestCollision.m_globalNormal;
                selectedObject = recorder.m_nearestCollision.m_object;
                selectedObjectOffset = recorder.m_nearestCollision.m_globalPos - selectedObject->getLocalPos();
                mouseState = MOUSE_SELECTION;
            }
        }
    }
    else
    {
        mouseState = MOUSE_IDLE;
    }
}


void mouseMotionCallback(GLFWwindow* a_window, double a_posX, double a_posY)
{

    if (mouseState == MOUSE_SELECTION)
    {
        int posX = a_posX - mouseX;
        int posY = a_posY - mouseY;

        double r = camera->getSphericalRadius();
        double polarDeg = camera->getSphericalPolarDeg() - 0.2 * posY;
        double azimuthDeg = camera->getSphericalAzimuthDeg() - 0.2 * posX;

        camera->setSphericalRadius(r);
        camera->setSphericalAzimuthDeg(azimuthDeg);
        camera->setSphericalPolarDeg(polarDeg);


        mouseX = a_posX;
        mouseY = a_posY;
    }
}
